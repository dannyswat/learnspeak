version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: learnspeak-db-prod
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-learnspeak}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - learnspeak-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # LearnSpeak Application (Backend + Frontend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: learnspeak-app
    restart: unless-stopped
    ports:
      - "${PORT:-8080}:8080"
    environment:
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_NAME: ${DB_NAME:-learnspeak}
      DB_SSL_MODE: disable
      
      # Server Configuration
      PORT: 8080
      ENVIRONMENT: production
      
      # JWT Configuration
      JWT_SECRET: ${JWT_SECRET}
      
      # Azure OpenAI Configuration (Optional)
      AZURE_OPENAI_KEY: ${AZURE_OPENAI_KEY}
      AZURE_OPENAI_ENDPOINT: ${AZURE_OPENAI_ENDPOINT}
      AZURE_OPENAI_DEPLOYMENT_NAME: ${AZURE_OPENAI_DEPLOYMENT_NAME}
      AZURE_OPENAI_API_VERSION: ${AZURE_OPENAI_API_VERSION:-2024-02-01}
      
      # Ideogram Configuration (Optional)
      IDEOGRAM_API_KEY: ${IDEOGRAM_API_KEY}
      IMAGE_GENERATION_PROVIDER: ${IMAGE_GENERATION_PROVIDER:-azure}
      
      # Azure Speech SDK Configuration (Optional)
      AZURE_SPEECH_KEY: ${AZURE_SPEECH_KEY}
      AZURE_SPEECH_REGION: ${AZURE_SPEECH_REGION}
      
      # Azure Translator Configuration (Optional)
      AZURE_TRANSLATOR_KEY: ${AZURE_TRANSLATOR_KEY}
      AZURE_TRANSLATOR_REGION: ${AZURE_TRANSLATOR_REGION}
      AZURE_TRANSLATOR_ENDPOINT: ${AZURE_TRANSLATOR_ENDPOINT}
      
      # Cache Configuration
      IMAGE_CACHE_ENABLED: ${IMAGE_CACHE_ENABLED:-true}
      TTS_CACHE_ENABLED: ${TTS_CACHE_ENABLED:-true}
      TRANSLATOR_CACHE_ENABLED: ${TRANSLATOR_CACHE_ENABLED:-true}
      
      # Upload Configuration
      MAX_UPLOAD_SIZE: ${MAX_UPLOAD_SIZE:-10485760}
      
      # CORS Configuration (empty for production)
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-}
    volumes:
      # Persist uploaded files
      - uploads_data:/app/uploads
      # Mount .env file if you prefer file-based config
      # - ./.env:/app/.env:ro
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - learnspeak-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

networks:
  learnspeak-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  uploads_data:
    driver: local
